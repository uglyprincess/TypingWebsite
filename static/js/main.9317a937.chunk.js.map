{"version":3,"sources":["components/Header.jsx","components/Word.jsx","components/WordWindow.jsx","components/Timer.jsx","components/Result.jsx","components/TypeArea.jsx","App.js","index.js"],"names":["Header","className","Word","props","checkAgainst","user","actualWord","value","status","undefined","style","color","soFar","lastTrueIndex","length","i","console","log","Math","min","textColor","slice","checker","Words","index","arr","wordArray","curr","received","data","userInput","typed","map","word","Timer","useState","limit","time","ticktock","id","useRef","clear","clearInterval","current","useEffect","started","setInterval","parentCallback","ResultCard","speed","updateSpeed","WPM","floor","words","TypeArea","difficulty","changeDiff","typeWords","updateList","input","inColor","changeColor","toCompare","updateCompare","inputRef","updateTime","start","restart","totalWords","updateWPM","finished","checkFinish","commonWords","randomWords","exactly","maxLength","rareWords","textGenerator","newArray","freq","random","array","randIndex","currIndex","shuffle","concat","display","TextField","select","label","onChange","event","target","helperText","setting","MenuItem","InputLabel","Select","labelId","Button","variant","onClick","focus","InputProps","fontSize","backgroundColor","wordBeingTyped","currWord","wordsSoFar","App","ReactDOM","render","StrictMode","document","getElementById"],"mappings":"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","file":"static/js/main.9317a937.chunk.js","sourcesContent":["import React from 'react';\r\nimport './header.css';\r\n\r\nexport default function Header(){\r\n\r\n    return (<div className=\"header\">\r\n        <div className=\"home\">\r\n        </div>\r\n        <div className=\"title\">\r\n            <h1>typing speed</h1>\r\n        </div>\r\n        <div className=\"dropdown\">\r\n        </div>\r\n    </div>);\r\n}","import './word.css';\r\n\r\nexport default function Word(props) {\r\n\r\n    var checkAgainst = props.user;\r\n    var actualWord = props.value;\r\n\r\n    function checker() {\r\n\r\n        if(checkAgainst === undefined)\r\n            return <div className='current'>\r\n                    <div style={{color: 'black'}}>\r\n                        â”‚\r\n                    </div>\r\n                    <div>\r\n                        {actualWord}\r\n                    </div>\r\n                </div>;\r\n\r\n        if(checkAgainst === actualWord + \" \")\r\n        {\r\n            return '';\r\n        }\r\n\r\n        var soFar = true;\r\n        var lastTrueIndex = checkAgainst.length;\r\n\r\n        for(var i=0;i<checkAgainst.length;i++)\r\n        {\r\n            if(checkAgainst[i] === actualWord[i])\r\n            {\r\n                console.log(\"Going right!\");\r\n                // newColor('green');\r\n            }\r\n\r\n            else\r\n            {\r\n                console.log(\"Check again!\");\r\n                // newColor('red');\r\n                soFar = false;\r\n                lastTrueIndex = Math.min(lastTrueIndex, i);\r\n            }\r\n\r\n        }\r\n\r\n        var textColor = (soFar) ? 'green' : 'red';\r\n\r\n        return(<div className='current'>\r\n            <div style={{color: textColor}}>\r\n                {checkAgainst}\r\n            </div>\r\n            <div className=\"virtual_cursor\">\r\n                |\r\n            </div>\r\n            <div>\r\n                {actualWord.slice(lastTrueIndex,)}\r\n            </div>\r\n        </div>);\r\n\r\n    }\r\n\r\n    if(props.status === true)\r\n        return checker();\r\n\r\n    else\r\n    {\r\n        return (<div className=\"box\">\r\n            {actualWord}\r\n        </div>);\r\n    }\r\n}","import Word from './Word.jsx';\r\nimport './word.css';\r\n\r\nexport default function Words(props) {\r\n\r\n    // console.log(props.wordArray);\r\n\r\n    var index = 0;\r\n\r\n    var arr = props.wordArray.slice(1, 50);\r\n    var curr = props.received.data;\r\n    var userInput = props.received.typed;\r\n\r\n    // console.log(userInput);\r\n\r\n    return <div className='parent'>\r\n        <Word status={true} value={curr} key={index++} user={userInput}/>\r\n        {arr.map((word) => <Word status={false} value={word} key={index++}/>)}\r\n    </div>;\r\n\r\n}","import { useState, useEffect, useRef } from \"react\";\r\n\r\nexport default function Timer(props) {\r\n\r\n    const [time, ticktock] = useState(props.limit); \r\n    const id = useRef(null);\r\n\r\n    function clear() {\r\n        clearInterval(id.current);\r\n    }\r\n\r\n    useEffect(() => {\r\n        ticktock(props.limit);\r\n    }, [props.limit]);\r\n\r\n    useEffect(() => {\r\n\r\n        if(props.started)\r\n        {\r\n            id.current = setInterval(() => {\r\n                ticktock((time) => time-1);\r\n            }, 1000);\r\n        }\r\n        else\r\n            ticktock(props.limit);\r\n\r\n        return () => clear();\r\n    }, [props.started]);\r\n\r\n    useEffect(() => {\r\n        if(time===0)\r\n            clear();\r\n    }, [time]);\r\n\r\n    function hasStarted() {\r\n\r\n        console.log(props.started, time, props.limit);\r\n\r\n        if(!props.started)\r\n            return \"Press 'Start'!\";\r\n        else if(time!==0)\r\n            return time;\r\n        else\r\n        {\r\n            props.parentCallback();\r\n            return \"Time up!\";\r\n        }\r\n    }\r\n\r\n    return (<div>\r\n        {hasStarted()}\r\n    </div>);\r\n}","import {useEffect, useState} from 'react';\r\nimport './result.css';\r\n\r\nexport default function ResultCard(props) {\r\n\r\n    const [speed, updateSpeed] = useState();\r\n\r\n    useEffect(() => {\r\n\r\n        var WPM = Math.floor((props.words/props.time) * 60);\r\n        updateSpeed(WPM);\r\n        \r\n    }, [props.words, props.time]);\r\n\r\n    return (<div className=\"result_card\">\r\n        <div className=\"speed\">\r\n            <h1>Your speed is {speed} WPM!</h1>\r\n        </div>\r\n    </div>);\r\n}","import {React, useState, useRef} from \"react\";\r\nimport randomWords from 'random-words';\r\nimport TextField from '@material-ui/core/TextField';\r\nimport MenuItem from '@material-ui/core/MenuItem';\r\nimport Button from '@material-ui/core/Button';\r\nimport WordWindow from './WordWindow.jsx';\r\nimport Select from '@material-ui/core/Select';\r\nimport InputLabel from \"@material-ui/core/InputLabel\";\r\nimport Timer from './Timer.jsx';\r\nimport Result from './Result.jsx';\r\nimport './typearea.css';\r\n\r\nexport default function TypeArea(){\r\n\r\n    const [difficulty, changeDiff] = useState(4);\r\n    const [typeWords, updateList] = useState(['']);\r\n    const [input] = useState();\r\n    const [inColor, changeColor] = useState('#D1E8E4');\r\n    const [toCompare, updateCompare] = useState({\r\n        data: '',\r\n        typed: ''\r\n    });\r\n\r\n    const inputRef = useRef();\r\n    const [time, updateTime] = useState(60);\r\n    const [start, restart] = useState(false);\r\n    const [totalWords, updateWPM] = useState(0);\r\n    const [finished, checkFinish] = useState(false);\r\n\r\n    var commonWords = randomWords({exactly:500, maxLength: 10 });\r\n    var rareWords = randomWords({exactly:500, maxLength: 15});\r\n\r\n    const settings = [\r\n        {\r\n            value: 4,\r\n            label: \"Novice\"\r\n        },\r\n        {\r\n            value: 3,\r\n            label: \"Easy\"\r\n        },\r\n        {\r\n            value: 2,\r\n            label: \"Moderate\"\r\n        },\r\n        {\r\n            value: 1,\r\n            label: \"Hard\"\r\n        },\r\n        {\r\n            value: 0,\r\n            label: \"Expert\"\r\n        }\r\n    ]\r\n\r\n    function shuffle(array) {\r\n\r\n        var currIndex = array.length, randIndex;\r\n\r\n        while(currIndex!==0)\r\n        {\r\n            randIndex = Math.floor(Math.random() * currIndex);\r\n            currIndex--;\r\n\r\n            [array[currIndex], array[randIndex]] = [array[randIndex], array[currIndex]];\r\n        }\r\n\r\n        return array;\r\n    }\r\n\r\n    function handleChange(event) {\r\n        changeDiff(event.target.value);\r\n    }\r\n\r\n    function textGenerator() {\r\n        \r\n        let newArray = [];\r\n\r\n        let freq = difficulty;\r\n        let start = (Math.floor(Math.random() * 100));\r\n        newArray = commonWords.slice(start, start + freq*100);\r\n\r\n        freq = 5 - difficulty;\r\n        start = (Math.floor(Math.random()* 100));\r\n        newArray = newArray.concat(rareWords.slice(start, start + freq*100));\r\n\r\n        newArray = shuffle(newArray);\r\n        updateCompare({\r\n            data: newArray[0],\r\n            typed: ''\r\n        });\r\n\r\n        return(newArray);\r\n    }\r\n\r\n    function fetchText() {\r\n\r\n        updateList(textGenerator());\r\n        restart(false);\r\n        console.log(time);\r\n    }\r\n\r\n    function startTimer() {\r\n        focus();\r\n        restart(true);\r\n    }\r\n\r\n    function focus() {\r\n\r\n        // console.log(inputRef.current);\r\n        inputRef.current.focus();\r\n\r\n    }\r\n\r\n    function changeTimeLimit(event) {\r\n        updateTime(event.target.value);\r\n    }\r\n\r\n    function timeUp() {\r\n\r\n        updateList([]);\r\n        updateCompare({\r\n            data: \"\",\r\n            typed: \"\"\r\n        });\r\n        restart(false);\r\n        checkFinish(true);\r\n    }\r\n\r\n    function checker(event) {\r\n\r\n        var wordBeingTyped = event.target.value;\r\n        var currWord = typeWords[0];\r\n\r\n        updateCompare({\r\n            data: currWord,\r\n            typed: wordBeingTyped\r\n        });\r\n\r\n        // console.log(wordBeingTyped, currWord);\r\n\r\n        if(wordBeingTyped === currWord + \" \")\r\n        {\r\n            updateCompare({\r\n                data: typeWords[1],\r\n                typed: ''\r\n            });\r\n\r\n            updateWPM((wordsSoFar) => wordsSoFar+1);\r\n            \r\n            updateList(typeWords.slice(1,));\r\n            event.target.value = '';\r\n\r\n            changeColor('#D1E8E4');\r\n            return;\r\n        }\r\n\r\n    }\r\n\r\n    return(<div className=\"whole\">\r\n        <div className=\"configure\" style={{display: finished && \"none\"}}>\r\n            <div className=\"settings\">\r\n                <div className=\"settings_diff\">\r\n                    <TextField\r\n                    id=\"outlined-select-difficulty\"\r\n                    select\r\n                    label=\"Level\"\r\n                    value={difficulty}\r\n                    onChange={handleChange}\r\n                    helperText=\"Please select desired difficulty\"\r\n                    >\r\n                    {settings.map((setting) => (\r\n                        <MenuItem key={setting.value} value={setting.value}>\r\n                        {setting.label}\r\n                        </MenuItem>\r\n                    ))}\r\n                    </TextField>\r\n                </div>\r\n                <div className=\"settings_time\">\r\n                    <InputLabel id=\"select-time-limit\" className=\"time_label\">Time Limit</InputLabel>\r\n                    <Select\r\n                        labelId=\"simple-select-label\"\r\n                        id=\"simple-select\"\r\n                        className=\"time_select\"\r\n                        value={time}\r\n                        label=\"Time\"\r\n                        onChange={changeTimeLimit}\r\n                    >\r\n                        <MenuItem value={1}>1 second</MenuItem>\r\n                        <MenuItem value={30}>30 seconds</MenuItem>\r\n                        <MenuItem value={60}>60 seconds</MenuItem>\r\n                        <MenuItem value={120}>120 seconds</MenuItem>\r\n                    </Select>\r\n                </div>\r\n            </div>\r\n            <div className=\"button_field\">\r\n                <div className=\"button_one\">\r\n                    <Button variant=\"contained\" onClick={fetchText} className=\"fetch_button\">\r\n                        Fetch Text!\r\n                    </Button>\r\n                </div>\r\n                <div className=\"button_two\">\r\n                    <Button variant=\"contained\" onClick={startTimer} className=\"start_button\">\r\n                        Start\r\n                    </Button>\r\n                </div>\r\n            </div>\r\n            <div className=\"timer\" >\r\n                <Timer limit={time} started={start} parentCallback={timeUp}/>\r\n            </div>\r\n        </div>\r\n        <div className=\"displayText\" style={{display: finished && \"none\"}}>\r\n            <div className=\"show\">\r\n                <WordWindow wordArray={typeWords} received={toCompare}/>\r\n            </div>\r\n        </div>\r\n        <div className=\"typehere\" style={{display: finished && \"none\"}}>\r\n            <TextField \r\n                className=\"inputfield\" \r\n                variant=\"filled\"\r\n                inputRef={inputRef}\r\n                InputProps={{\r\n                    style: {fontSize: '30px', backgroundColor: inColor}\r\n                }}\r\n\r\n                value={input}\r\n                onChange={checker}\r\n            />\r\n        </div>\r\n        <div className=\"output\" style={{display: !finished && \"none\"}}>\r\n            <Result words={totalWords} time={time}/>\r\n        </div>\r\n    </div>);\r\n      \r\n}","import './App.css';\nimport Header from './components/Header.jsx';\nimport TypeArea from './components/TypeArea';\n\nfunction App() {\n    return (\n        <div className=\"App\">\n            <Header />\n            <TypeArea/>\n        </div>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n"],"sourceRoot":""}